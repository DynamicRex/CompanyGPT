name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/*
  pull_request:
    branches:
      - main
      - feature/*

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Backend setup (Python)
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'  # Match the version used in your local environment

    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Verify Backend Dependencies
      run: |
        pip check  # Ensures that all dependencies are correctly installed and there are no conflicts

    # Add environment variables here for MongoDB, JWT, etc.
    - name: Run backend tests
      run: |
        pytest backend/tests
      env:
        MONGO_DETAILS: ${{ secrets.MONGO_DETAILS }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
        PYTHONPATH: ./backend  # Makes sure Python can find your backend modules

    # Step 3: Ensure FastAPI can start (even if skeleton)
    - name: Start FastAPI Application (Testing API skeleton)
      run: |
        uvicorn backend.main:app --host 127.0.0.1 --port 8000 --reload &
        sleep 15  # Increased sleep time to ensure FastAPI starts
        curl http://127.0.0.1:8000
      env:
        MONGO_DETAILS: ${{ secrets.MONGO_DETAILS }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}

    # Step 4: Frontend setup (Node.js)
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'  # Ensure node version matches your local environment

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install

    # Step 5: Linting for Frontend Code
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint

    # Step 6: Run Frontend Tests
    - name: Run frontend tests
      run: |
        cd frontend
        npm test

    # Step 7: Build Frontend for Production
    - name: Build frontend
      run: |
        cd frontend
        npm run build

    # Step 8: Deploy to a static site host (optional)
    # This step is optional and depends on your hosting solution for the frontend.
    # Example: Deploying to GitHub Pages
    # - name: Deploy to GitHub Pages
    #   uses: peaceiris/actions-gh-pages@v3
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     publish_dir: ./frontend/build
